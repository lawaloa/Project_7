{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Project 7: Modeling Car Insurance Claims Outcome\"\n",
        "title-block-banner: \"SKYBLUE2.jpeg\"\n",
        "author:\n",
        "  - name:  \"Lawal's Project\"\n",
        "    affiliation: \"Associate Data Science Course in Python by DataCamp Inc\"\n",
        "date: \"2024-11-23\"\n",
        "toc: true\n",
        "number-sections: true\n",
        "highlight-style: pygments\n",
        "format: \n",
        "  html:\n",
        "    code-fold: true\n",
        "    code-tools: true\n",
        "  pdf:\n",
        "    geometry:\n",
        "      - top=30mm\n",
        "      - left=20mm\n",
        "  docx: default\n",
        "execute:\n",
        "  warning: false\n",
        "  echo: true   \n",
        "  eval: true  \n",
        "  output: true \n",
        "  error: false   \n",
        "  cache: false\n",
        "  include_metadata: false\n",
        "jupyter: python3\n",
        "---\n",
        "\n",
        "\n",
        "![car](car.jpg)\n",
        "\n",
        "# Project Overview\n",
        "\n",
        "Insurance companies invest a lot of [time and money](https://www.accenture.com/_acnmedia/pdf-84/accenture-machine-leaning-insurance.pdf){target=\"_blank\"} into optimizing their pricing and accurately estimating the likelihood that customers will make a claim. In many countries insurance it is a legal requirement to have car insurance in order to drive a vehicle on public roads, so the market is very large!\n",
        "\n",
        "Knowing all of this, On the Road car insurance have requested your services in building a model to predict whether a customer will make a claim on their insurance during the policy period. As they have very little expertise and infrastructure for deploying and monitoring machine learning models, they've asked you to identify the single feature that results in the best performing model, as measured by accuracy, so they can start with a simple model in production.\n",
        "\n",
        "They have supplied you with their customer data as a csv file called `car_insurance.csv`, along with a table detailing the column names and descriptions below.\n",
        "\n",
        "| Column | Description |\n",
        "|--------|-------------|\n",
        "| `id` | Unique client identifier |\n",
        "| `age` | Client's age: <br> <ul><li>`0`: 16-25</li><li>`1`: 26-39</li><li>`2`: 40-64</li><li>`3`: 65+</li></ul> |\n",
        "| `gender` | Client's gender: <br> <ul><li>`0`: Female</li><li>`1`: Male</li></ul> |\n",
        "| `driving_experience` | Years the client has been driving: <br> <ul><li>`0`: 0-9</li><li>`1`: 10-19</li><li>`2`: 20-29</li><li>`3`: 30+</li></ul> |\n",
        "| `education` | Client's level of education: <br> <ul><li>`0`: No education</li><li>`1`: High school</li><li>`2`: University</li></ul> |\n",
        "| `income` | Client's income level: <br> <ul><li>`0`: Poverty</li><li>`1`: Working class</li><li>`2`: Middle class</li><li>`3`: Upper class</li></ul> |\n",
        "| `credit_score` | Client's credit score (between zero and one) |\n",
        "| `vehicle_ownership` | Client's vehicle ownership status: <br><ul><li>`0`: Does not own their vehilce (paying off finance)</li><li>`1`: Owns their vehicle</li></ul> |\n",
        "| `vehcile_year` | Year of vehicle registration: <br><ul><li>`0`: Before 2015</li><li>`1`: 2015 or later</li></ul> |\n",
        "| `married` | Client's marital status: <br><ul><li>`0`: Not married</li><li>`1`: Married</li></ul> |\n",
        "| `children` | Client's number of children |\n",
        "| `postal_code` | Client's postal code | \n",
        "| `annual_mileage` | Number of miles driven by the client each year |\n",
        "| `vehicle_type` | Type of car: <br> <ul><li>`0`: Sedan</li><li>`1`: Sports car</li></ul> |\n",
        "| `speeding_violations` | Total number of speeding violations received by the client | \n",
        "| `duis` | Number of times the client has been caught driving under the influence of alcohol |\n",
        "| `past_accidents` | Total number of previous accidents the client has been involved in |\n",
        "| `outcome` | Whether the client made a claim on their car insurance (response variable): <br><ul><li>`0`: No claim</li><li>`1`: Made a claim</li></ul> |\n",
        "\n",
        ": Customer data {#tbl-Car}\n",
        "\n",
        "# Task\n",
        "\n",
        "- Identify the single feature of the data that is the best predictor of whether a customer will put in a claim (the `\"outcome\"` column), excluding the `\"id\"` column.\n",
        "\n",
        "- Store as a DataFrame called `best_feature_df`, containing columns named `\"best_feature\"` and `\"best_accuracy\"` with the name of the feature with the highest accuracy, and the respective accuracy score.\n",
        "\n",
        "# Data Source\n",
        "\n",
        "Data: The primary data used for this analysis is the car_insurance.csv. See @tbl-Car for the column names and descriptions.\n",
        "\n",
        "# Tools\n",
        "\n",
        "Jupyter lab\n",
        "\n",
        "# Methodology: Steps/Explanations\n",
        "\n",
        "## The necessary libraries was imported, which were `Pandas` and `logit` from `statsmodels.formula.api` {.unlisted .unnumbered}\n",
        "\n",
        "## Reading in and exploring the dataset, including imputation of missing values {.unlisted .unnumbered}\n",
        "\n",
        "- The Original dataset was loaded, named `car`.\n",
        "- The first  function, `explore`, was designed to help analyze and clean a dataset by providing a detailed overview of its structure and content, and it also optionally imputes missing values. Here's a step-by-step explanation:\n",
        "\n",
        "1. **Function creation and its arguments**: `data`, the DataFrame to analyze; `head_rows`, the number of rows to display from the start of the DataFrame (default: 5); `group_by_col`, the column used to group data for imputing missing values (default: None); `cols_to_impute`, the list of columns where missing values will be filled with the group mean (default: None).\n",
        "\n",
        "`def explore(data, head_rows=5, group_by_col=None, cols_to_impute=None):`\n",
        "\n",
        "2. **Function Task 1**: Prints information about the DataFrame, such as:\n",
        "\n",
        "- Number of rows and columns.\n",
        "- Data types of each column.\n",
        "- Non-null counts for each column.\n",
        "\n",
        "```\n",
        "print(\"\\n--- DataFrame Info ---\\n\")\n",
        "data.info()\n",
        "```\n",
        "\n",
        "3. **Function Task 2**: Displays summary statistics for all columns, including:\n",
        "\n",
        "- For numerical data: Mean, standard deviation, min, max, and percentiles.\n",
        "- For categorical data: Frequency counts (mode) and unique counts.\n",
        "\n",
        "```\n",
        "print(\"\\n--- Summary Statistics ---\\n\")\n",
        "print(data.describe(include='all'))\n",
        "```   \n",
        "\n",
        "3. **Function Task 3**: Displays the first head_rows rows (default: 5) of the DataFrame to give a preview of the data.\n",
        "\n",
        "```\n",
        "print(f\"\\n--- First {head_rows} Rows ---\\n\")\n",
        "print(data.head(head_rows))\n",
        "```\n",
        "\n",
        "4. **Function Task 4**: Iterates over each column and prints the unique values present in it. Helps understand the distinct data points for each column.\n",
        "\n",
        "```\n",
        "print(\"\\n--- Unique Values ---\\n\")\n",
        "for col in data.columns:\n",
        "    print(f\"{col}: {data[col].unique()}\")\n",
        "```\n",
        "\n",
        "5. **Function Task 5**: Fills missing values (`NaN`) in the specified columns (`cols_to_impute`) by grouping data based on `group_by_col` and calculating the mean for each group.\n",
        "\n",
        "- Steps:\n",
        "  + Groups the data by the column specified in `group_by_col`.\n",
        "  + Calculates the mean for the columns listed in `cols_to_impute` for each group.\n",
        "  + Fills missing values in each column by mapping the group means to the corresponding rows.\n",
        "\n",
        "- Error Handling:\n",
        "  + Ensures the function doesn't crash if the specified column is not found or if an error occurs during imputation.\n",
        "\n",
        "```\n",
        "if group_by_col and cols_to_impute:\n",
        "    print(\"\\n--- Imputing Missing Values ---\\n\")\n",
        "    try:\n",
        "        group_means = data.groupby(group_by_col)[cols_to_impute].mean().to_dict()\n",
        "        for col in cols_to_impute:\n",
        "            if col in data.columns:\n",
        "                print(f\"Imputing missing values in '{col}' based on group means of '{group_by_col}'\")\n",
        "                data[col] = data[col].fillna(data[group_by_col].map(group_means[col]))\n",
        "            else:\n",
        "                print(f\"Column '{col}' not found in the dataset.\")\n",
        "    except Exception as e:\n",
        "        print(f\"Error while imputing missing values: {e}\")\n",
        "``` \n",
        "\n",
        "6. **Function Task 6**: After the imputation, checks and prints the count of missing values in each column to verify if gaps were successfully filled.\n",
        "\n",
        "```\n",
        "print(\"\\n--- Any missing values again ? ---\\n\")\n",
        "print(data.isna().sum())\n",
        "```\n",
        "\n",
        "## Finding the best performing model, with the highest accuracy. {.unlisted .unnumbered}\n",
        "\n",
        "- The second function, `best_logmodel`, was designed to identify the single best feature in a dataset for predicting a binary outcome using logistic regression with the statsmodels library. Here's a detailed explanation:\n",
        "\n",
        "1. **Function creation and its arguments**: `data`, the input dataset for modeling as a pandas DataFrame; `outcome_column`, the target column (dependent variable) representing the outcome being predicted (default: 'outcome'); `id_column`, a unique identifier column to exclude from the analysis (default: 'id').\n",
        "\n",
        "`def best_logmodel(data, outcome_column='outcome', id_column='id'):`\n",
        "\n",
        "2. **Function Task**: Creates a new DataFrame (`data1`) by removing the `id_column` (not predictive) and the `outcome_column` (target variable) from the list of features. The remaining columns are treated as potential predictors.\n",
        "\n",
        "`data1 = data.drop(columns=[id_column, outcome_column])`\n",
        "\n",
        "3. **Initialize Tracking Variables**: `best_feature`, placeholder for the name of the feature with the highest accuracy and `best_accuracy`, tracks the best accuracy score encountered during the iteration.\n",
        " \n",
        "```\n",
        "best_feature = None\n",
        "best_accuracy = 0\n",
        "```\n",
        "\n",
        "4. **Loop Through Each Feature**: Iterates through all the columns (features) in data1 to evaluate their predictive power for the `outcome_column`.\n",
        "\n",
        "`for col in data1.columns:`\n",
        "\n",
        "5. **Create the Logistic Regression Formula**: Constructs a formula for logistic regression in the form `\"outcome_column ~ feature_column\"`.\n",
        "\n",
        "`formula = f\"{outcome_column} ~ {col}\"`\n",
        "\n",
        "6. **Fit Logistic Regression Model**:  Fits a logistic regression model for the current feature using the `logit` function from `statsmodels`. The `disp=False argument suppresses output during model fitting.\n",
        "\n",
        "`model = logit(formula=formula, data=data).fit(disp=False)`\n",
        "\n",
        "7. **Generate Confusion Matrix**: Produces a confusion matrix for the logistic regression model’s predictions.\n",
        "\n",
        "`confusion_matrix = model.pred_table()`\n",
        "\n",
        "- **Confusion Matrix Layout**:\n",
        "\n",
        "```\n",
        "[[TN, FP],   # TN = True Negatives, FP = False Positives\n",
        " [FN, TP]]   # FN = False Negatives, TP = True Positives\n",
        "```\n",
        "8. **Calculates the model’s accuracy from the confusion matrix**:\n",
        "\n",
        "- `TP`: True Positives (correctly predicted positives).\n",
        "- `TN`: True Negatives (correctly predicted negatives).\n",
        "- `T`: Total number of predictions.\n",
        "- **Accuracy Formula**: \n",
        "\n",
        "$$\n",
        "\\text{Accuracy} = \\frac{\\text{TP} + \\text{TN}}{\\text{Total Predictions}}\n",
        "$$\n",
        "\n",
        "9. **Update the Best Feature**: Compares the current feature’s accuracy with the best accuracy seen so far. If the current feature has a higher accuracy, update `best_feature` and `best_accuracy`.\n",
        "\n",
        "```\n",
        "if accuracy > best_accuracy:\n",
        "    best_feature = col\n",
        "    best_accuracy = accuracy\n",
        "``` \n",
        "\n",
        "10. **Store Results in a DataFrame**: Summarizes the results into a pandas DataFrame with:\n",
        "\n",
        "- `best_feature`: The name of the feature with the highest accuracy.\n",
        "- `best_accuracy`: The corresponding accuracy score.\n",
        "\n",
        "```\n",
        "best_feature_df = pd.DataFrame({\n",
        "    \"best_feature\": [best_feature],\n",
        "    \"best_accuracy\": [best_accuracy]\n",
        "})\n",
        "```\n",
        "11. **Return the Results**: Returns the DataFrame so that the results can be used or displayed.\n",
        "\n",
        "`return best_feature_df`\n",
        "\n",
        "\n",
        "# Data Analysis\n"
      ],
      "id": "50aa5faa"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Import required modules\n",
        "import pandas as pd\n",
        "from statsmodels.formula.api import logit\n",
        "\n",
        "# Start coding!\n",
        "car = pd.read_csv(\"car_insurance.csv\")\n",
        "\n",
        "# Exploring the data\n",
        "\n",
        "def explore(data, head_rows=5, group_by_col=None, cols_to_impute=None):\n",
        "    \"\"\"\n",
        "    Explores the given DataFrame by displaying basic information, summary statistics, \n",
        "    the first few rows, unique values, and imputes missing values with group means if specified.\n",
        "\n",
        "    Parameters:\n",
        "        data (pd.DataFrame): The DataFrame to explore.\n",
        "        head_rows (int): Number of rows to display for the head of the DataFrame. Default is 5.\n",
        "        group_by_col (str): Column name to group by for imputing missing values. Default is None.\n",
        "        cols_to_impute (list): List of column names to impute missing values. Default is None.\n",
        "    \"\"\"\n",
        "    print(\"\\n--- DataFrame Info ---\\n\")\n",
        "    data.info()\n",
        "    \n",
        "    print(\"\\n--- Summary Statistics ---\\n\")\n",
        "    print(data.describe(include='all'))  # Include all data types in describe()\n",
        "    \n",
        "    print(f\"\\n--- First {head_rows} Rows ---\\n\")\n",
        "    print(data.head(head_rows))\n",
        "    \n",
        "    print(\"\\n--- Unique Values ---\\n\")\n",
        "    for col in data.columns:\n",
        "        print(f\"{col}: {data[col].unique()}\")\n",
        "    \n",
        "    # Impute missing values if group_by_col and cols_to_impute are specified\n",
        "    if group_by_col and cols_to_impute:\n",
        "        print(\"\\n--- Imputing Missing Values ---\\n\")\n",
        "        try:\n",
        "            group_means = data.groupby(group_by_col)[cols_to_impute].mean().to_dict()  # Group means as a dictionary\n",
        "            for col in cols_to_impute:\n",
        "                if col in data.columns:\n",
        "                    print(f\"Imputing missing values in '{col}' based on group means of '{group_by_col}'\")\n",
        "                    data[col] = data[col].fillna(data[group_by_col].map(group_means[col]))\n",
        "                else:\n",
        "                    print(f\"Column '{col}' not found in the dataset.\")\n",
        "        except Exception as e:\n",
        "            print(f\"Error while imputing missing values: {e}\")\n",
        "    \n",
        "    print(\"\\n--- Any missing values again ? ---\\n\")\n",
        "    print(data.isna().sum())\n",
        "\n",
        "# Example usage\n",
        "# explore(your_data, group_by_col=\"outcome\", cols_to_impute=[\"credit_score\", \"annual_mileage\"])\n",
        "\n",
        "explore(car, group_by_col=\"outcome\", cols_to_impute=[\"credit_score\", \"annual_mileage\"])\n",
        "\n",
        "def best_logmodel(data, outcome_column='outcome', id_column='id'):\n",
        "    \"\"\"\n",
        "    Identifies the single best feature for predicting the outcome column using logistic regression \n",
        "    with statsmodels. Calculates accuracy directly from the confusion matrix.\n",
        "\n",
        "    Parameters:\n",
        "        data (pd.DataFrame): The dataset containing features and the outcome column.\n",
        "        outcome_column (str): The name of the target column.\n",
        "        id_column (str): The name of the column to exclude from analysis.\n",
        "\n",
        "    Returns:\n",
        "        pd.DataFrame: A DataFrame with the best feature and its accuracy score.\n",
        "    \"\"\"\n",
        "    # Exclude ID and outcome columns from columns set\n",
        "    data1 = data.drop(columns=[id_column, outcome_column])\n",
        "    \n",
        "    best_feature = None\n",
        "    best_accuracy = 0\n",
        "\n",
        "    # Iterate through each columns\n",
        "    for col in data1.columns:\n",
        "        # Create formula for logistic regression\n",
        "        formula = f\"{outcome_column} ~ {col}\"\n",
        "        \n",
        "        # Fit logistic regression model on the entire dataset\n",
        "        model = logit(formula=formula, data=data).fit(disp=False)\n",
        "        \n",
        "        # Generate confusion matrix using pred_table()\n",
        "        confusion_matrix = model.pred_table()\n",
        "        \n",
        "        # Calculate accuracy from confusion matrix\n",
        "        TP = confusion_matrix[1, 1]\n",
        "        TN = confusion_matrix[0, 0]\n",
        "        T = confusion_matrix.sum()\n",
        "        accuracy = (TP + TN) / T\n",
        "\n",
        "        # Update the best feature if this one is better\n",
        "        if accuracy > best_accuracy:\n",
        "            best_feature = col\n",
        "            best_accuracy = accuracy\n",
        "\n",
        "    # Store results in a DataFrame\n",
        "    best_feature_df = pd.DataFrame({\n",
        "        \"best_feature\": [best_feature],\n",
        "        \"best_accuracy\": [best_accuracy]\n",
        "    })\n",
        "\n",
        "    return best_feature_df\n",
        "\n",
        "# Example usage\n",
        "# best_feature_df = best_logmodel(your_data)\n",
        "# print(best_feature_df)\n",
        "\n",
        "best_feature_df = best_logmodel(car)\n",
        "\n",
        "print(best_feature_df)"
      ],
      "id": "0683e005",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Result/Findings\n",
        "\n",
        "- The analysis identified `driving_experience` (indicating the years the client has been driving) as the best predictor of whether a customer will file a claim, with an accuracy score of 77.7%. This indicates that the model correctly predicted claims and non-claims in approximately 78 out of 100 cases, making this feature a significant factor in claim prediction.\n",
        "\n",
        "# Recommendations\n",
        "\n",
        "None\n",
        "\n",
        "# Limitations\n",
        "\n",
        "None\n",
        "\n",
        "# Conclusion\n",
        "\n",
        "Our analysis identified `driving_experience` (years of driving) as the strongest predictor of claim submissions, achieving an accuracy score of 77.7%. This result highlights the importance of driving experience in assessing customer risk. The model correctly classified claims and non-claims in 78 out of 100 cases.\n",
        "\n",
        "Logistic regression was used to evaluate the predictive power of individual features, and accuracy was calculated using a confusion matrix. The prominence of driving experience suggests that more experienced drivers may exhibit different risk profiles, which could guide targeted policy offerings.\n",
        "\n",
        "We recommend incorporating this insight into your risk assessment models.\n",
        "\n",
        "# References\n",
        "\n",
        "1. For loop in Intermediate Python Course for Associate Data Scientist in Python Carrer Track in DataCamp Inc by Hugo Bowne-Henderson.\n",
        "\n",
        "2. Introduction to functions in Python in Intermediate Python Course for Associate Data Scientist in Python Carrer Track in DataCamp Inc by Hugo Bowne-Henderson.\n",
        "\n",
        "3. Introduction to Regression with statsmodels in Python in Intermediate Python Course for Associate Data Scientist in Python Carrer Track in DataCamp Inc by Maarten Van den Broeck.\n",
        "\n",
        "4. Exploratory Data Analysis in Python in Intermediate Python Course for Associate Data Scientist in Python Carrer Track in DataCamp Inc by Hugo Bowne-Henderson.\n",
        "\n",
        "5. Python For Data Analysis 3E (Online) by Wes Mckinney Click [here](https://wesmckinney.com/book/){target=\"_blank\"} to preview."
      ],
      "id": "f7dd9fed"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\Hon.Olayinka\\miniconda3\\envs\\pydata-book\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}